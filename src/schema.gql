# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthUserPayload {
  token: String
  user: UserModel
  userErrors: [UserError!]
}

input CommentAddToPostInput {
  comment: String!
  media: [MediaBaseInput!]
  postId: UUID!
}

type CommentAddToPostPayload {
  comment: CommentModel
  userErrors: [UserError!]
}

type CommentMediaModel {
  commentId: UUID!
  id: UUID!
  source: String!
  type: MediaType!
}

type CommentModel {
  comment: String!
  createdAt: DateTime!
  id: UUID!
  media: [CommentMediaModel!]
  postId: UUID!
  updatedAt: DateTime!
  userId: UUID!
}

input CommentPostEditInput {
  comment: String
  id: UUID!
}

type CommentPostEditPayload {
  comment: CommentModel
  userErrors: [UserError!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum FilterGroupType {
  HOT
  NEW
  THE_BEST
}

input MediaBaseInput {
  source: String!
  type: MediaType!
}

enum MediaType {
  PHOTO
}

type Mutation {
  commentAddToPost(input: CommentAddToPostInput!): CommentAddToPostPayload!
  commentPostEdit(input: CommentPostEditInput!): CommentPostEditPayload!
  commentRemove(commentId: UUID!): Boolean!
  postAddBookmark(input: PostAddBookmarkInput!): Boolean!
  postAddLike(input: PostAddLikeInput!): Boolean!
  postCreate(input: PostCreateInput!): PostCreatePayload!
  postEdit(input: PostEditInput!): PostEditPayload!
  postRemove(postId: UUID!): Boolean!
  signIn(input: SignInInput!): AuthUserPayload!
  signUp(input: SignUpInput!): AuthUserPayload!
}

type PageOffsetInfo {
  count: Float!
  page: Float!
  total: Float!
}

input PostAddBookmarkInput {
  postId: UUID!
}

input PostAddLikeInput {
  postId: UUID!
  type: UserPostLikeType!
}

input PostCreateInput {
  description: String!
  media: [MediaBaseInput!]
  tags: [String!]
  title: String!
}

type PostCreatePayload {
  post: PostModel
  userErrors: [UserError!]
}

input PostEditInput {
  description: String
  id: UUID!
  tags: [String!]
  title: String
}

type PostEditPayload {
  post: PostModel
  userErrors: [UserError!]
}

input PostGetFilter {
  groupType: FilterGroupType
  search: String = ""
  tags: [String!] = []
}

type PostMediaModel {
  id: UUID!
  postId: UUID!
  source: String!
  type: MediaType!
}

type PostModel {
  createdAt: DateTime!
  description: String!
  dislikesCount: Float!
  id: UUID!
  likesCount: Float!
  media: [PostMediaModel!]
  tags: [String!]!
  title: String!
  updatedAt: DateTime!
}

input PostsBookmarksInput {
  limit: Float = 10
  page: Float = 1
}

type PostsBookmarksPayload {
  data: [PostModel!]
  pageInfo: PageOffsetInfo
  userErrors: [UserError!]
}

input PostsGetInput {
  filters: PostGetFilter
  limit: Float = 10
  order: PostsGetOrder
  page: Float = 1
}

input PostsGetOrder {
  createdAt: SortType
  likesCount: SortType
}

type PostsGetPayload {
  data: [PostModel!]
  pageInfo: PageOffsetInfo
  userErrors: [UserError!]
}

type Query {
  postsBookmarks(input: PostsBookmarksInput!): PostsBookmarksPayload!
  postsGet(input: PostsGetInput!): PostsGetPayload!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
  username: String!
}

enum SortType {
  ASC
  DESC
}

"""
A string represents string UUID v4
"""
scalar UUID

interface UserError {
  field: String!
  messages: [String!]!
}

type UserModel {
  id: UUID!
  username: String!
}

enum UserPostLikeType {
  DISLIKE
  LIKE
}

type ValidationError implements UserError {
  field: String!
  messages: [String!]!
}
